{"version":3,"sources":["Preserve.tsx","Modal.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["options","value","label","CheckBoxCmp","Form","FormGroup","check","inline","Label","Input","type","ListCmp","props","state","selected","onChange","bind","this","setState","preserveSelectOrder","showOrderButtons","icons","moveLeft","className","moveAllLeft","key","moveRight","moveAllRight","moveDown","moveUp","React","Component","PreserveSelectOrderExample","Popup","Modal","contentClassName","size","isOpen","toggle","backdrop","ModalHeader","ModalBody","Preserve","ModalFooter","ModalExample","buttonLabel","useState","modal","setModal","Button","onClick","TblCmp","Table","scope","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ad3d6cf.chunk.js","sourcesContent":["import React from 'react';\r\nimport DualListBox from 'react-dual-listbox';\r\nimport { Form, FormGroup, Label, Input } from 'reactstrap';\r\n/*const options1 = [\r\n    {\r\n        label: 'Earth',\r\n        options: [\r\n            { value: 'luna', label: 'Moon' },\r\n        ],\r\n    },\r\n    {\r\n        label: 'Mars',\r\n        options: [\r\n            { value: 'phobos', label: 'Phobos' },\r\n            { value: 'deimos', label: 'Deimos' },\r\n        ],\r\n    },\r\n    {\r\n        label: 'Jupiter',\r\n        options: [\r\n            { value: 'io', label: 'Io' },\r\n            { value: 'europa', label: 'Europa' },\r\n            { value: 'ganymede', label: 'Ganymede' },\r\n            { value: 'callisto', label: 'Callisto' },\r\n        ],\r\n    },\r\n];*/\r\n\t\t\r\nconst options = [\r\n    { value: '1', label: 'First Name' },\r\n\t{ value: '2', label: 'Last Name' },\r\n    { value: '3', label: 'Username' },\r\n\t{ value: '4', label: 'Occupation' },\r\n\t{ value: '5', label: 'Address' },\r\n\t{ value: '6', label: 'Country' },\r\n\t{ value: '7', label: 'State' },\r\n\t{ value: '8', label: 'Language' },\r\n\t{ value: '9', label: 'Income' },\r\n\t{ value: '10', label: 'Organization' },\r\n];\r\n\r\n\r\nconst CheckBoxCmp = ()=>{\r\n\treturn(\r\n\t\t<Form>\r\n\t\t\t<FormGroup check inline>\r\n\t\t\t\t<Label check>\r\n\t\t\t\t\t<Input type=\"checkbox\" /> Some input\r\n\t\t\t\t</Label>\r\n\t\t\t</FormGroup>\r\n\t\t\t<FormGroup check inline>\r\n\t\t\t\t<Label check>\r\n\t\t\t\t\t<Input type=\"checkbox\" /> Some other\r\n\t\t\t\t</Label>\r\n\t\t\t</FormGroup>\r\n\t\t\t<FormGroup check inline>\r\n\t\t\t\t<Label check>\r\n\t\t\t\t\t<Input type=\"checkbox\" /> Test input\r\n\t\t\t\t</Label>\r\n\t\t\t</FormGroup>\r\n\t\t\t<FormGroup check inline>\r\n\t\t\t\t<Label check>\r\n\t\t\t\t\t<Input type=\"checkbox\" /> Some other input\r\n\t\t\t\t</Label>\r\n\t\t\t</FormGroup>\r\n\t\t\t<FormGroup check inline>\r\n\t\t\t\t<Label check>\r\n\t\t\t\t\t<Input type=\"checkbox\" /> Some other input\r\n\t\t\t\t</Label>\r\n\t\t\t</FormGroup>\r\n\t\t\t<FormGroup check inline>\r\n\t\t\t\t<Label check>\r\n\t\t\t\t\t<Input type=\"checkbox\" /> Some other input\r\n\t\t\t\t</Label>\r\n\t\t\t</FormGroup>\r\n\t\t</Form>\r\n\t);\r\n}\r\nclass ListCmp extends React.Component {\r\n    state = { selected: ['1','2','3'] };\r\n\r\n    constructor(props:any) {\r\n        super(props);\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(selected:any) {\r\n        this.setState({ selected });\r\n    }\r\n\r\n    render() {\r\n        const { selected } = this.state;\r\n\r\n        return (\r\n\t\t\t<>\r\n            <DualListBox\r\n                options={options}\r\n                preserveSelectOrder\r\n                selected={selected}\r\n                showOrderButtons\r\n                onChange={this.onChange}\r\n\t\t\t\ticons={{\r\n\t\t\t\t\tmoveLeft: <span className=\"fa fa-chevron-left\" />,\r\n\t\t\t\t\tmoveAllLeft: [\r\n\t\t\t\t\t\t<span key={0} className=\"fa fa-chevron-left\" />,\r\n\t\t\t\t\t\t<span key={1} className=\"fa fa-chevron-left\" />,\r\n\t\t\t\t\t],\r\n\t\t\t\t\tmoveRight: <span className=\"fa fa-chevron-right\" />,\r\n\t\t\t\t\tmoveAllRight: [\r\n\t\t\t\t\t\t<span key={0} className=\"fa fa-chevron-right\" />,\r\n\t\t\t\t\t\t<span key={1} className=\"fa fa-chevron-right\" />,\r\n\t\t\t\t\t],\r\n\t\t\t\t\tmoveDown: <span className=\"fa fa-chevron-down\" />,\r\n\t\t\t\t\tmoveUp: <span className=\"fa fa-chevron-up\" />,\r\n\t\t\t\t}}\r\n            />\t\t\r\n\t\t\t\r\n\t\t\t</>\r\n        );\r\n    }\r\n}\r\n\r\nconst PreserveSelectOrderExample = ()=>{\r\n\treturn(\r\n\t\t<>\r\n\t\t\t<ListCmp />\r\n\t\t\t<br />\r\n\t\t\t<CheckBoxCmp />\r\n\t\t</>\r\n\t)\r\n}\r\nexport default PreserveSelectOrderExample;","import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport Preserve from './Preserve';\r\n\r\ninterface PopupProps{\r\n    isOpen:boolean,\r\n    toggle:any,\r\n    className:any,\r\n    backdrop:boolean\r\n}\r\nconst Popup = (props: PopupProps) => {\r\n    return (\r\n        <Modal contentClassName=\"my-modal\" size = 'lg' isOpen={props.isOpen} toggle={props.toggle} className={props.className} backdrop={props.backdrop} >\r\n            <ModalHeader toggle={props.toggle}>Column List</ModalHeader>\r\n            <ModalBody>\r\n                <Preserve />\r\n            </ModalBody>\r\n            <ModalFooter>\r\n\t\t\t\t<button className = 'btn btn-success float-right'>Save</button>\r\n\t\t\t</ModalFooter>\r\n        </Modal>\r\n    );\r\n}\r\nconst ModalExample = (props: any) => {\r\n    const {\r\n        buttonLabel,\r\n        className\r\n    } = props;\r\n    const [modal, setModal] = useState(false);\r\n    const [backdrop, setBackdrop] = useState(false);\r\n    const toggle = () => setModal(!modal);\r\n    return (\r\n        <>\r\n            <Button className=\"btn-danger float-right m-1\" onClick={toggle}>Setting</Button>\r\n            <Popup isOpen={modal} toggle={toggle} className={className} backdrop={backdrop} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalExample;","import React from 'react';\nimport { Table } from 'reactstrap';\nimport Modal from './Modal';\nimport './App.css';\nimport 'react-dual-listbox/lib/react-dual-listbox.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nconst TblCmp = () => {\n  return (\n    <>\n      \n      <Table>\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>First Name</th>\n            <th>Last Name</th>\n            <th>Username</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">1</th>\n            <td>Mark</td>\n            <td>Otto</td>\n            <td>@mdo</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">2</th>\n            <td>Jacob</td>\n            <td>Thornton</td>\n            <td>@fat</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">3</th>\n            <td>Larry</td>\n            <td>the Bird</td>\n            <td>@twitter</td>\n          </tr>\n        </tbody>\n      </Table>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <div className=\"row\">\n        <div className=\"col-md-10\">\n          <Modal />\n        </div>\n        <div className=\"col-md-10\">\n          \n          <TblCmp />\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}